# attcal.mi
# Mission to run in-situ compass cal for the attitude_rev
# compass_cal behavior puts the attitude_rev into CCD sampling mode, and stores CCD 
# data in a XXXXXXXX.cal file (same 8 digit mission number as the other glider files)
# After the mission completes, pilot should send off the last *.cal to be parsed by the 
# True North GliderCal program
#
# 2018-07-19 lcooney@teledyne.com Initial

behavior: abend
    b_arg: stalled_for(sec)               -1   # disable
    b_arg: overdepth_sample_time(s)       20.0 # how often to check
                                               # MS_ABORT_OVERTIME
    b_arg: overtime(s)                    4200.0 # < 0 disables
                                               # MS_ABORT_WPT_TOOFAR
    b_arg: max_wpt_distance(m)            -1   # Maximum allowable distance to a waypoint           
    b_arg: samedepth_for_sample_time(s)   30.0 # how often to check
    b_arg: undervolts(volts)              10.0 # < 0 disables Decrease to 9
                                               # for Lithium primary batteries  

    b_arg: no_cop_tickle_for(sec)      48600.0 # secs, abort mission if watchdog
                                               # not tickled this often, <0 disables
    b_arg: no_cop_tickle_percent(%)         -1 # 0-100, <0 disables

################################################################################

# surface behaviors that wait for ^C quit/resume
# compass_cal behavior will print how many samples have been taken during surface dialog
behavior: surface
    b_arg: start_when(enum)    1  # stk idle
    b_arg: end_action(enum)  1   # 1 wait for ^C quit/resume

behavior: surface
    b_arg: start_when(enum)   12  # no_comms
    b_arg: end_action(enum)   1   # 1 wait for ^C quit/resume
    b_arg: when_secs(sec)     1800  

# surface behaviors that quit the mission
behavior: surface
    b_arg: start_when(enum)    11  # sci_surface; triggered if we achieve compass_cal num_samples
    b_arg: end_action(enum)   0   # 0-quit
    b_arg: gps_wait_time(sec) 300   # how long to wait for gps

behavior: surface
    b_arg: start_when(enum)    6  # sci_surface; triggered if we achieve compass_cal num_samples
    b_arg: end_action(enum)   0   # 0-quit, 
    b_arg: when_secs(sec)     3600  

################################################################################

# Two set_heading behaviors are stacked to alternate between hardover stbd and port every when_secs

behavior: set_heading
    b_arg: use_heading(bool) 4 # in, 4 HM_FIN
    b_arg: heading_value(X) -100.0 # use_heading == 4 C_FIN(rad),     >0 turns to stbd
    b_arg: start_when(enum) 6     # When_secs
    b_arg: stop_when(enum)  6     # When_secs
    b_arg: when_secs(sec)  300    # Behavior activates and deactivates every X seconds
    b_arg: end_action(enum) 2     # 0 = quit, 2 = resume

behavior: set_heading
    b_arg: use_heading(bool) 4 # in, 4 HM_FIN
    b_arg: heading_value(X) 100.0 # use_heading == 4 C_FIN(rad),     >0 turns to stbd
    b_arg: start_when(enum) 0     # Immediately
    b_arg: stop_when(enum)  5     # Never

################################################################################

behavior: compass_cal                    
    b_arg: start_when(enum) 0          # immediately
    b_arg: when_secs(sec)   0          # only if start_when==6 or 9
    b_arg: num_samples(nodim) 300      # Minimum required number of samples is 85
                                       # If x_att_cal_sample > num_samples, then compass_cal behavior will complete
                                       # compass_cal behavior will set SCI_WANTS_SURFACE upon completion, so if a
                                       # surface behavior with start_when 11 is specified, the glider will surface
                                       # upon compass_cal completion

################################################################################

behavior: yo
    b_arg: start_when(enum)      4   # updwn_idle
    b_arg: num_half_cycles_to_do(nodim) -1  # Number of dive/climbs to perform

    # arguments for dive_to
    b_arg: d_target_depth(m)    30   # target depth can be deeper, but first dive will not be sampled due to M_AIR_FILL state 
    b_arg: d_target_altitude(m) 3

    b_arg: d_use_bpump(enum)      2  # 2  Buoyancy Pump absolute
    b_arg: d_bpump_value(X) -1000.0  # full drive to get largest pitch moment possible
  
    b_arg: d_use_pitch(enum)      1  # 1  BattPos
    b_arg: d_pitch_value(X)       3  # Pitch battery full forward, gets clipped by software

    # arguments for climb_to
    b_arg: c_target_depth(m)      5
    b_arg: c_target_altitude(m)  -1

    b_arg: c_use_bpump(enum)      2  # 2  Buoyancy Pump absolute
    b_arg: c_bpump_value(X)  1000.0  # full drive to get largest pitch moment possible

    b_arg: c_use_pitch(enum)      1 # 1  BattPos
    b_arg: c_pitch_value(X)      -3 # Pitch battery full forward, gets clipped by software

    b_arg: end_action(enum) 2     # 0-quit, 2 resume

################################################################################

behavior: prepare_to_dive
    b_arg: start_when(enum) 0     # 0-immediately, 1-stack idle 2-depth idle
    b_arg: wait_time(s)   720     # 12 minutes, how long to wait for gps

################################################################################

behavior: sensors_in       # Turn most input sensors off
