# breadcr.mi
#
#  Mission designed for under ice recovery response
#  Purpose of this mission is to follow a series of 'breadcrumbs', waypoints which are the last GPS positions that have been acheived.
#  ***Note***: mission reads from two .ma files that are automatically generated, goto_l99.ma and yo99.ma
#  Retrieves waypoints from mafiles/goto_l99.ma 
#	Positions are automatically generated the first time that a special abort is called. See notes below in goto_list
#  Retrieves yo envelope from mafiles/yo99.ma and within mission
#	yo99.ma contains c_target_depth, file is automatically generated each time we go through the special abort handler 
#	single yo to 130m
#  Surfaces:
#     if haven't had comms for 2 hrs
#     if waypoint hit
#     pitch_idle hit
#  If we are able to get comms/GPS at some point during the mission, then the mission will end during the surfacing interval
#  If we are unable to get comms/GPS during the mission, we will eventually abort for MS_ABORT_OVERTIME, NO_TICKLE_ICE, or SURFACE_BLOCKED

#
# 2018-07-23 lcooney@teledyne.com Initial



################################################################################

behavior: abend
    b_arg: overdepth_sample_time(s)       20.0 # how often to check
                                               # MS_ABORT_OVERTIME
    b_arg: overtime(s)                 10800.0 # < 0 disables
                                               # MS_ABORT_WPT_TOOFAR
    b_arg: max_wpt_distance(m)            -1   # Maximum allowable distance to a waypoint           
    b_arg: samedepth_for_sample_time(s)   30.0 # how often to check

    # Put samedepth_for to be quite large and disable stalled_for; we should catch these with the yo hover_for/stalled_for
    b_arg: samedepth_for(sec)             2200   # MS_ABORT_SAMEDEPTH
    b_arg: stalled_for(sec)             -1     # MS_ABORT_STALLED

    b_arg: undervolts(volts)              10.0 # < 0 disables Decrease to 9
                                               # for Lithium primary batteries  

    b_arg: no_cop_tickle_for(sec)      48600.0 # secs, abort mission if watchdog
                                               # not tickled this often, <0 disables
    b_arg: no_cop_tickle_percent(%)         -1 # 0-100, <0 disables

    # Enable this to be very long time, but just in case
    b_arg: samedepth_for_surfacing(sec) 1800 # MS_ABORT_SURFACE_BLOCKED

    b_arg: invalid_gps(nodim) -1			# MS_ABORT_INVALID_GPS disabled


# Try to come up every way point
# These are the 'breadcrumbs' of the last (up to) 4 GPS positions from successful surfacings
behavior: surface
    b_arg: start_when(enum)         8             # 8-when hit waypoint
    b_arg: end_action(enum)         1             # 0-quit, 1 wait for ^C quit/resume, 2 resume, 3 drift til "end_wpt_dist"
    b_arg: gps_wait_time(s)         300           # how long to wait for gps
    b_arg: keystroke_wait_time(sec) 300           # how long to wait for control-C
    b_arg: when_wpt_dist(m)         10            # how close to waypoint before surface, only if start_when==7
    b_arg: c_use_pitch(enum)        3             # 3:servo
    b_arg: c_pitch_value(X)         0.4528        # 26 deg
    b_arg: printout_cycle_time(sec) 60.0 # How often to print dialog

# For no comms
behavior: surface
    b_arg: start_when(enum)         12    
    b_arg: when_secs(sec)     7200 # 2 hrs
    b_arg: end_action(enum)   0  # 0-quit, 1 wait for ^C quit/resume, 2 resume, 3 drift til "end_wpt_dist"
    b_arg: gps_wait_time(sec) 300   # how long to wait for gps

# For pitch idle
behavior: surface
    b_arg: start_when(enum)         2             # 0-immediately, 1-stack idle 2-pitch idle 3-heading idle
    b_arg: end_action(enum)         1            # 0-quit, 1 wait for ^C quit/resume, 2 resume, 3 drift til "end_wpt_dist"
    b_arg: gps_wait_time(s)         300           # how long to wait for gps
    b_arg: keystroke_wait_time(sec) 300           # how long to wait for control-C
    b_arg: when_wpt_dist(m)         10            # how close to waypoint before surface, only if start_when==7
    b_arg: c_use_pitch(enum)        3             # 3:servo
    b_arg: c_pitch_value(X)         0.4528        # 26 deg

# For no more waypoints
behavior: surface
    b_arg: start_when(enum)         3             # 0-immediately, 1-stack idle 2-pitch idle 3-heading idle
    b_arg: end_action(enum)         0            # 0-quit, 1 wait for ^C quit/resume, 2 resume, 3 drift til "end_wpt_dist"
    b_arg: gps_wait_time(s)         300           # how long to wait for gps
    b_arg: keystroke_wait_time(sec) 300           # how long to wait for control-C
    b_arg: when_wpt_dist(m)         10            # how close to waypoint before surface, only if start_when==7
    b_arg: c_use_pitch(enum)        3             # 3:servo
    b_arg: c_pitch_value(X)         0.4528        # 26 deg
  
behavior: goto_list
    b_arg: args_from_file(enum) 99   # read from mafiles/goto_l99.ma. goto_l99 generated automatically
    b_arg: num_legs_to_run(nodim) -1 # -1      loop forever
    b_arg: start_when(enum) 0
    b_arg: list_stop_when(enum) 7
    b_arg: initial_wpt(enum) -1 # -1 ==> one after last one achieved


behavior: yo
    b_arg: args_from_file(enum) 99   # read from mafiles/yo99.ma
# yo99.ma contains the following:
# b_arg: c_target_depth(m) X, where X is X_STUCK_DEPTH (clipped between U_MAX_EXPECTED_ICEBERG_DEPTH and U_REQD_DEPTH_AT_SURFACE)

    b_arg: start_when(enum)      2   # pitch idle (see doco below)
    b_arg: num_half_cycles_to_do(nodim) 4   # Number of dive/climbs to perform
                                     # <0 is infinite, i.e. never finishes

    # arguments for dive_to
    b_arg: d_target_depth(m)      90  # **Note: this must be deeper than U_MAX_EXPECTED_ICEBERG_DEPTH 
    b_arg: d_target_altitude(m)   20

    b_arg: d_use_pitch(enum)      3   # 1:battpos  2:setonce  3:servo
                                      #   in         rad        rad, <0 dive
    b_arg: d_pitch_value(X)    -0.4528     # -26 deg
    b_arg: d_stop_when_hover_for(sec) 600
    b_arg: d_stop_when_stalled_for(sec) 800

    # arguments for climb_to
    #b_arg: c_target_depth(m)      3 # this is read from mafiles/yo99.ma
    b_arg: c_target_altitude(m)  -1
    b_arg: c_use_pitch(enum)      3   # 1:battpos  2:setonce  3:servo
                                      #   in         rad        rad, >0 climb
    b_arg: c_pitch_value(X)     0.4538     # 26 deg
    b_arg: c_stop_when_hover_for(sec) 600 
    b_arg: c_stop_when_stalled_for(sec) 800
    b_arg: end_action(enum) 2     # 0-quit, 2 resume


   # Sample all science sensors only on downcast and upcast
#behavior: sample
#    b_arg: state_to_sample(enum)   7  # 7  diving|hovering|climbing
#
#    b_arg: intersample_time(s)     0  # if < 0 then off, if = 0 then
                                      # fast as possible


behavior: prepare_to_dive
    b_arg: start_when(enum) 0     # 0-immediately, 1-stack idle 2-depth idle
    b_arg: wait_time(s)   300     # 2 minutes, how long to wait for gps

################################################################################

behavior: sensors_in      
    # <0 off, 0 as fast as possible, N, sample every N secs


# Some documentation on b_args common to all behaviors
# NOTE: When you add these common b_args, put them at END of b_arg
#       list for behaviors.  They do not "naturally" belong there, but
#       it means you do not have to edit behaviors which typically have
#       hardwired b_arg positions in them

# NOTE: These are symbolically defined beh_args.h
# b_arg: START_WHEN     When the behavior should start, i.e. go from UNITIALIZED to ACTIVE
#    BAW_IMMEDIATELY    0   // immediately
#    BAW_STK_IDLE       1   // When stack is idle (nothing is being commanded)
#    BAW_PITCH_IDLE     2   // When pitch is idle(nothing is being commanded)
#    BAW_HEADING_IDLE   3   // When heading is idle(nothing is being commanded)
#    BAW_UPDWN_IDLE     4   // When bpump/threng is idle(nothing is being commanded)
#    BAW_NEVER          5   // Never stop
#    BAW_WHEN_SECS      6   // After behavior arg "when_secs", from prior END if cycling
#    BAW_WHEN_WPT_DIST  7   // When sensor(m_dist_to_wpt) < behavior arg "when_wpt_dist"
#    BAW_WHEN_HIT_WAYPOINT 8 // When X_HIT_A_WAYPOINT is set by goto_wpt behavior
#    BAW_EVERY_SECS     9   // After behavior arg "when_secs", from prior START if cycling
#    BAW_EVERY_SECS_UPDWN_IDLE 10  // After behavior arg "when_secs", from prior START AND
#                                  //       updown is idle, no one commanding vertical motion
#    BAW_SCI_SURFACE    11  // SCI_WANTS_SURFACE is non-zero
#    BAW_NOCOMM_SECS    12  // when have not had comms for WHEN_SECS secs
#
# b_arg: STOP_WHEN
#   0   complete
#   1-N same as "start_when"
